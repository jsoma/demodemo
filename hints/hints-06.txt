









You'll want an svg for each *year*. What's your data look like? What's every row?





















So grab the div 'container' and do your selectall/data/enter/append magic with svgs instead of with circles or paths. Read the code carefully up top, comparing it to your previous code - we're starting with a <div></div>















Did that make sense? Like, we want 1 datapoint = 1 svg. Except... not 1 datapoint. One... group of datapoints?

















When you add your svgs, they have the whole margin/g/transform thing going on. Otherwise you'll lose out on having scales and such.












You'll be able to cut and paste more easily if you use this

    .each(function(d) {
      let svg = d3.select(this)
    })






















If you're cutting and pasting, watch out for the ; on the end of the transform/translate line! if you don't delete it it'll cause trouble.















And of course make sure your svgs are SMALL.


















Add your axes. Where do they go? Well... inside of EACH svg.
















Make sure you're capitalizing your column names correctly! If you don't you'll get a lot of NaN-y errors

















having problems with an undefined svg? don't forget var svg = d3.select(this) inside of your function(d)!
















you probably only want 3 or 4 ticks on the x and y axis, otherwise it gets too busy. You can either use .ticks(#) to require a specific number of ticks or .tickValues([x, x, x]) to specify specific locations.


















You'll be drawing your areas with d3.area












d3.area can only use ONE column name.
















...so maybe we need more than one d3.area?













Each svg gets two paths inside of it, but... it's kind of different than we are used to. Try starting with just drawing the USA, then adding in Japan once you're satisfied with the USA.





















Think about how each area graph needs to pay attention to a different column. Can you use the same d3.area()?











Since one row = two measurements, you don't do svg.selectAll("path") etc etc. You just .append twice - once for USA and once for Japan. You could even skip .datum if you want, depending on how you write your code!


















When you're adding the year label, think about how you're going to get the year out of 'd'. Again, since there's just one per mini-graph it doesn't involve .selectAll etc.
















center text at its x/y with

  .attr("text-anchor", "middle")


















you can also use negative x/y values to push things left/up more than the svg would normally allow you
















The total fertility rate is the SUM of all fertility rates (for a specific country). So for a given year for Japan, it's all of the ASFR_jp added together.


















So it sounds like we need... a list of ASFR_jp and a way to get the SUM of all of them.


















d3.mean gets the mean, d3.max gets the max, d3.median gets the median.... what do you think gets the sum?















ok fun now write that to the page for the US and Japan, in ***the appropriate colors***.














Have a lot of numbers after the decimal point? .toFixed(2) will help you.

