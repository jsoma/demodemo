This one is crazy.









Let's talk about the data a little bit.

The "year" column is... the year.
The "diff" column is the difference between that temperature and the average. -6 is "Extremely cold" and +6 is "Extremely hot".
The "freq" column is how many times that year temperatures were in that range.

For example, in 1932 it might look like this:

    year  diff freq
    1932  -6   3
    1932  -3   10
    1932  0    3
    1932  3    1
    1932  6    0

So in 1932 was very cold (-6) 3 times, somewhat cold (-3) 10 times, average 3 times, kind of hot 1 time, and never very hot. The freq in the actual data isn't really a count, but you get it!


















Start by building the chart for 1951-1980.












To set up your x position scale, it's pretty easy - it just goes from very cold to very hot.
















Your y position scale is a little different. Freq goes from 0 to... what's the highest freq value? If only d3 had some way to do that! Take a look at notes-transformations.html from class 6.















...which means you can set the range before you've read in data, but the domain will need to wait until after you've read in your data.































D3 uses d3.csv to read in csv files. What do you think it uses for tsv files?




















(Yeah, pandas allowed us to use sep='\t', but d3 is oddly specific and uses d3.tsv)












This will involve filtering your data to only be between 1951 and 1980. You might want to look at notes-transformations.html from class 6!

If you've filtered correctly, you'll end up with 241 data points













If things are weird, think about how D3 is going to be reading in your years. Are they numbers?














you don't say "or" in JavaScript, you use ||
You don't say "and", you use &&
















Add an svg to your container for this first graph. Be sure to set the width, height, and margins! Just doing an container.append('svg') will work fine. You might want to steal code from chart-1.js to cut and paste margins and all of that.


Actually, add FOUR svgs. You can call them svg1951, svg1983, svg1994 and svg2005.





























Now you're going to need to get a little crazy.

* Your x axis is your difference: the -6 to 6 number
* Your y axis is the frequency: the 0 to ...whatever number

This would be normal and fine to make a line out of, except... you're AVERAGING 1951-1980. You aren't just taking 1951 and using d.diff and d.freq!

If we were doing this in pandas, we would GROUP BY one column, and then take the MEAN of another column.

We already learned d3.nest() is how you groupby, but we haven't learned how to do averages yet! So I'll just tell you.

Imagine we had a bunch of countries, and they were all on different continents, and we wanted their median life expectancy. Hard to imagine, I know!

    var nested = d3.nest()
      .key(d => d.continent)
      .rollup(values => d3.median(values, v => v.life_expectancy))
      .entries(datapoints)

it groups by d.continent, and then "rolls up" all of the values in that category into a single number. You should use console.log to see what you get, but it should look someting like this:

    [
      { key: 'Asia', value: 87.5 },
      { key: 'North America', value: 83.4 }
      { key: 'Africa', value: 73.0 }
    ]

Instead of 'diff' or 'freq' or 'year', you only have the key and the rolled up value.

Pay attention to those column names when you're building your line generator!!!








Make a line generator!!!!










Now draw the 1951-1983 mean temperature area graph on the first svg! ...You shoudl also draw it on the 1983 comparison svg and the 1994 comparison svg and the 2005 comparison svg, too, because you'll have to eventually!













(If you're doubting how things look, it might help to put an x axis on there just for a sanity check)
















Now on your second chart, do the same thing for the years 1983-1993. Plot it right on top of the 1950-1980 graph! Use a different color and a little opacity so you can tell the difference between the two.

You can re-use variable names, too, just remove the 'var' or 'let' part or eslint/parcel will yell at you for "duplicate declaration" of a variable.
















Now do the same for the 1994-2004 chart.





And for the 2005-2015 chart!











You should now have 4 charts:
  * 1951-1980
  * 1951-1980 + 1983-1993
  * 1951-1980 + 1994-2004
  * 1951-1980 + 2005-2015










Now it's time to get funky and color them in! God forgive me for making you do this. We'll start by fixing up the first 1951-1980 chart.


My Hot Stuff hint is: instead of thinking of this as a single area chart that has different colors in it, think of it as separate area charts - one for each color! How are you going to do that?













...I don't know what you were thinking, but we're going to do it manually. Kind of.

Let's start by drawing 'hot' on top of everything else.











'Hot' is anything with a diff between 0.9 and 3. Can you graph just the things with a diff between 0.9 and 3? 












Time to filter again! But this time you aren't filtering your original datapoints, you're filtering your nested/calculated/mean frequency data!


Remember, though: what's the column name for the different in the nested data?












Filter it to just be the ones with a diff between 0.9 and 3, and then plot JUST those. Make it a nice orange color. You can use the same line function and everything! Make sure you're drawing it ON TOP of the other graph, otherwise you won't see it.









Now do the same for very cold, cold, normal, hot, very hot. Filter, graph. Filter, graph. Filter graph.

  * very cold: below -3
  * cold: -3 to -0.9
  * normal: -0.9 to 0.9
  * hot: 0.9 to 3
  * very hot: above 3

Now, are you going to do this.... for.... everything? Again and again?











I mean, you could. Sure. Why not!











Or if you're lazy and fancy, you could write a function, and just use variables for everything. Here, I'll even tell you how to make it:

    function drawTemp(svg, data, minTemp, maxTemp, color) {
      // put your code in here 
    }

And tell you how you'll use it, too! This would draw your 'normal' range in light grey.

    drawTemp(svg1951, nested, -0.9, 0.9, 'lightgrey')








You can put this function anywhere, kind of. Just as long as it's somewhere above where you try to use it. 

I'd put it... I don't know, wherever. Maybe right after you make your svgs, it seems like a nice place to find it. JavaScript is pretty understanding about these things, and I'm not on a power trip about how you should organize your code. 
















When you need to draw your background 1951-1980 ones again, think about how you can make that function graph *all* your data for that year, instead of just a smaller range like "cold". You'll want to pick a different grey than the 'normal' grey, or else you'll think you did something wrong later!












So if you made that function (which I hope you did), now you just get to filter / nest / use the function for vcold/cold/normal/hot/vhot. Again and again!


Hm, hate that repetition? You can always write another function to simplify that stuff, if you really want! It might look like

    function drawAllAreas(svg, startYear, endYear) {
    }

and you might call it like

    drawAllAreas(svg1994, 1994, 2004)









If you want to steal the NYT colors:

* dark blue: #236085
* blue: #96bccf
* grey: #e5e5e5 but I think a darker #cac7c7 works better in our case
* orange: #ee9f71
* red: #c9604b












bold text = font-weight: bold
but it's .style, not .attr!














Jeez, you've read this far? Well, if you want to add axes, you don't need to do it one by one. This code selects every svg inside of the container, then gets the first 'g' tag inside of it (that's your margin-y thing)

    container.selectAll('svg')
      .each(function() {
        var svg = d3.select(this).select('g')
        ....
      })

You can then make axes and labels and all of that as much as you want!




You'll want to use xPositionScale to position the cold/hot/etc text in the 'right 'spot!










You can just use normal <line> elements for the axis lines! xPositionScale can help you out a lot. They only need an x1 y1 x2 y2 and a stroke color.

Look up 'stroke-dasharray' to find out how to make it dashed (try .attr('stroke-dasharray', '2 2') if you're too lazy to google).









If you want to be fancy, think about the fact that you need four vertical lines, at -3, -0.9, 0.9 and 3.













At... [-3, -0.9, 0.9, 3]?













selectAll/data/enter/append, anyone?





